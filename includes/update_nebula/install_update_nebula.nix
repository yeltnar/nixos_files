# this will set up the network updating functionality 
# to create the cert, etc for this device, copy the id_rsa.pub to the machine that will generate the new files
# this will also generate a .default.env file wich can be overwritten with the .env file in the same directory 
# the rest _should_ be taken care of with the script and systemd timer 
{
  config,
  pkgs,
  ...
}: let
  cloned_repo = builtins.fetchGit {
    url = "https://github.com/yeltnar/nebula-ansible";
  };
  vardir = "/var/yeltnar-nebula";
  user = "drew";
  group = "100";
in {
  system.activationScripts.setup_nebula_env = {
    text = /*bash*/ ''

      # set up the cert for the private network for the update script 
      cat <<EOCERT > ${vardir}/knownca.pem
      -----BEGIN CERTIFICATE-----
      MIIBozCCAUqgAwIBAgIRAPZn1/oD/c0M9GhKndrWbmcwCgYIKoZIzj0EAwIwMDEu
      MCwGA1UEAxMlQ2FkZHkgTG9jYWwgQXV0aG9yaXR5IC0gMjAyMSBFQ0MgUm9vdDAe
      Fw0yMTEwMDMwNDIzNDdaFw0zMTA4MTIwNDIzNDdaMDAxLjAsBgNVBAMTJUNhZGR5
      IExvY2FsIEF1dGhvcml0eSAtIDIwMjEgRUNDIFJvb3QwWTATBgcqhkjOPQIBBggq
      hkjOPQMBBwNCAAR4V9bn+bmOJfWlIGkNZyy+FzHCxIZiU3Ko6f+MgY9fbZddVvZU
      +qUMqdj1jOOSHGb2oksfABkhrJAnNcqtafH9o0UwQzAOBgNVHQ8BAf8EBAMCAQYw
      EgYDVR0TAQH/BAgwBgEB/wIBATAdBgNVHQ4EFgQUGxw7vsSlsHoIbX3fqTwnH8+8
      Ni0wCgYIKoZIzj0EAwIDRwAwRAIgAPmMzq8t6N9H6wUyxEjYZY870ysKNxtrBrmK
      JmH3busCICZnli09FnPU9/3mt6Kf1AhEF6X3evM+J/P1gEGOqM9u
      -----END CERTIFICATE-----
      EOCERT
      
      # set defaults which can be overwritten with the .env file 
      cat <<EOENV > ${vardir}/.default.env
      # GENERATED; DO NOT EDIT; use .env if you need to edit
      export HOST="10.10.10.8"
      export PORT="2323"
      export CURL_OPTIONS="--cacert ./knownca.pem"
      
      export SECONDARY_PORT="443"
      # export SECONDARY_HOST="hot.andbrant.com"
      # export SECONDARY_CURL_OPTIONS=""
      export SECONDARY_HOST="hot.mini.lan"
      export SECONDARY_CURL_OPTIONS="--cacert ./knownca.pem"
      
      export DEVICE_NAME="${config.networking.hostName}" 
      export DATE_FILE_PATH="/var/yeltnar-nebula/tar_stuff/remote_updated.date"
      export var_dir="/var/yeltnar-nebula"
      export nebula_config_client_folder="/etc/nebula"
      EOENV

      text_to_check="# setup nebula env # ";

      dir_to_add="/home/${user}/.config/extra_includes";
      file_to_add="$dir_to_add/setup_nebula_env";
      text_to_add="source $file_to_add"; # TODO remove

      mkdir -p "$dir_to_add";
      chown -R ${user}:${group} "$dir_to_add";

      # create sourced file every time 
      cat > $file_to_add <<- EOM
      # DO NOT EDIT THIS FILE... IT IS GENERATED

      # only continue if interactive
      if [[ ! \$- == *i* ]]
      then


        # alert missing files
        if [ ! -e ${vardir}/.env ]; then
          echo "!! ${vardir}/.env is not present";
        fi
        if [ ! -e ${vardir}/knownca.pem ]; then
          echo "!! ${vardir}/knownca.pem is not present";
        fi
        if [ ! -e ${vardir}/id_rsa ]; then
          echo "!! ${vardir}/id_rsa is not present";
        fi
        if [ ! -e ${vardir}/id_rsa.pub ]; then
          echo "!! ${vardir}/id_rsa.pub is not present";
        fi
      fi
      EOM

      chown ${user}:${group} "$file_to_add";

      # create bashrc file if not there
      if [ ! -e /home/${user}/.bashrc ]; then
        touch /home/${user}/.bashrc;
        chown ${user} /home/${user}/.bashrc;
      fi

      # create update_nebula dir if not there
      if [ ! -d ${vardir} ]; then
        mkdir -p ${vardir}
        chown ${user} ${vardir};
      fi

      # create compare_date.sh file if not there
      if [ ! -e ${vardir}/compare_date.sh ]; then
        cp ${cloned_repo.outPath}/compare_date.sh ${vardir}/compare_date.sh;
        chown ${user}:${group} ${vardir}/compare_date.sh;
      fi
      # create process_tar.sh file if not there
      if [ ! -e ${vardir}/process_tar.sh ]; then
        cp ${cloned_repo.outPath}/process_tar.sh ${vardir}/process_tar.sh;
        chown ${user}:${group} ${vardir}/process_tar.sh;
      fi

      if [ ! -e ${vardir}/id_rsa ]; then
        pushd ${vardir};
        # TODO # create id_rsa(.pub) if theyre not there;
        ${pkgs.openssh}/bin/ssh-keygen -t rsa -m PEM -N "" -q -f "${vardir}/id_rsa" -b 4096;
        popd;
      fi

      test_str=$(cat /home/${user}/.bashrc | grep "$text_to_check");
      # echo $text_to_check;
      # echo $test_str;

      if [ -z "$test_str" ]; then
        echo "$text_to_check" >> /home/${user}/.bashrc;
        echo "$text_to_add" >> /home/${user}/.bashrc;
      fi
    '';
  };
}
